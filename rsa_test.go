package crypto

import (
	"bytes"
	"encoding/base64"
	"testing"
)

func TestRSA_PublicKeyDecrypt(t *testing.T) {
	pubKey, err := GetPubKeyFromPem([]byte(`-----BEGIN PUBLIC KEY-----
MIGiMA0GCSqGSIb3DQEBAQUAA4GQADCBjAKBhAC/CqGWElxuCB+Cq35tdhmw+g85
pmlSNTsQUOCaW2867pH27S/4pb3tG3UdZpfH15daSCtgHljL2Z1NkzoYRTtBpc4h
ieRfPH1hQFJxWe1jYc7bk626cxEHue0o8rAK9demLOcXMh75u8kXrI9hLZRhXESf
hTni4pn9+xSQrfWSPdaGaQIDAQAB
-----END PUBLIC KEY-----`))
	if err != nil {
		t.Fatal(err)
	}

	base64Data := "Izarp0bR9xOzCxsO1V48L5COXq3vClG3Kuk2/HvKayRUB2haEcL5/5vwVd+HuluRQ7h7bYJxshSIcvhTymrV7OyMQoDxMY0Ju7d2S7tLN1U9HvtEZYIjbouUvjs906kx78UbiJiKbZy3bnWSBsWTwf0hEioavJfaLRL3dXGfXOfb7cI="
	data, err := base64.StdEncoding.DecodeString(base64Data)
	if err != nil {
		t.Fatal(err)
	}

	decrypt, err := pubKeyDecrypt(pubKey, data)
	if err != nil {
		t.Fatal(err)
	}

	if string(decrypt) != `{"mode":0,"bits":128,"init":"07947e125834f1d97f3304b325a1783d","pass":"f1e987c3241ac5417d51b561610a03b2"}` {
		t.Fatal("Result not expected", decrypt, data)
	}
}

var rsaTestSets = []struct {
	//	dst     []byte
	src     string
	pubKey  string
	privKey string
}{

	{
		`{"mode": 1, "bits": 128, "init": "42da98a1a5f320da", "pass": "5e4e801638406c94eb8f8e30420a127e"}`,
		`LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRHUUFEQ0JqQUtCaEFEUmIxMDJqVDBZb3MvWWlVZEcrOUVKNUNodgpaMFZhNEUyWXQrb2pISnVyUmIwVFhYTnNhTllqSHJNS1FQY2lHYWpFc1c4eXJPd3hBYjVrZVZ1cUFrQVRJa1JTCk5WUmNZYjVTVkxVTnNlTkIrVFVGT2hRZlRVNU1WaDVVUVBzS2x3WUFsYU1tcEJZM3JnRlhlMTl2Rm5DNVA2REgKYktOK21YOG5xaytYWDV2VmRQdHVKUUlEQVFBQgotLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0K`,
		`LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDYVFJQkFBS0JoQURSYjEwMmpUMFlvcy9ZaVVkRys5RUo1Q2h2WjBWYTRFMll0K29qSEp1clJiMFRYWE5zCmFOWWpIck1LUVBjaUdhakVzVzh5ck93eEFiNWtlVnVxQWtBVElrUlNOVlJjWWI1U1ZMVU5zZU5CK1RVRk9oUWYKVFU1TVZoNVVRUHNLbHdZQWxhTW1wQlkzcmdGWGUxOXZGbkM1UDZESGJLTittWDhucWsrWFg1dlZkUHR1SlFJRApBUUFCQW9HRGJ2RHJFNmFsb3BNOFBwd1pvY1JxNnk1dExQWXJpd1FlbHJOMTE3dWp5b3BhcWhOcXZSYWJ1R2JlCnVLUEpSY3NKMTRlV08rWFdCKy9BaDBDeUNkQy9XR05UTFJNWGhCR1JuNThEODRBOEtDb2F6SU1PeXRyeHZUclIKd0lJdmZWUjhGNERTczVQbm9Sb21zNkxyeWRtSUxxd0xveS9wSXRwSkkrdTdzS1NBUGhBTlZkRUNRZzhabVducAoxd08wcmUrK3FuS1ozYUUxSVdtRng4YksrMlRYUnd6MmgxV1h4S09pK2JqUXZsOHNYeEhHTDN6aEpVSlBQZlVFCnIwSzRSQWh6RHZYdHVsbzVkd0pDRGQ2djRXMTljVzBnQVNOMkhRZjc3M0JzOFdnYUtHQzZKemhXb3pDN2FEdEwKN0ZheGtWNFM4VFN2V1BzUjAwN2FxMGl5UTFNYUZGVko1N2ZMeWhRVzdieERBa0lPVW9lemNEdWpwakw5SGVwcQpQUXQ5SnZvRUx3Sm95b3RkQU56QnJPeDlBVEZnek9yMG8vcU9KM1lkVTlBak1TSzRISlYxMi9XbzRVS1dpUnY5CnBIbUhyczBDUWcwdWY3OWgvSjlwRThxaE5pYmZLS3ZtRUZQYUdVb1lxN0tNazZKaXRTbVplVTJ6RXUxU0YvU1AKbXJxWld0YVZrYkxKMDBteTJBMU5CWUVvcDVCMVNWbEYyd0pDQ2lKV0tEWk5jeXpNTWJoT2dPR2RIVE9DL09VUApodmo4YWJQZ2xJdUlzeHVHbHBHdlNiTFVUZzFKTTA1c0h2QWRUMUw3b1ErV3hkWXF2cmJPY1FWb25QUFMKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K`,
	},
	{
		`{"mode": 0, "bits": 128, "init": "b94360977e79c6935021fcf048a86dfb", "pass": "9497160c7900ef2de389f1621b4bd80a"}`,
		`LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRHUUFEQ0JqQUtCaEFEZzhCVzVlMEsvTUg0enFMS2JFZHBwaERLbQo5SlRaRFJBZW1BYTJBcnpNSmV1T3RIaVBBeHJaVWdmckUrbDZtZng1amdwUGx2NzkvUGlmaXRxOE4weGNNc3A2CmVhZWQrOVo2SXZNaHM4V1lwd3hNYk0wUk5sU0lZdWZzNG1pMDJ1bWtGdG5DTmNPOHNCQjUvNEVESEpCUndvTlgKU1Y3clRNQlZBZUxaeW1BQXIzclRQd0lEQVFBQgotLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0K`,
		`LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDYVFJQkFBS0JoQURnOEJXNWUwSy9NSDR6cUxLYkVkcHBoREttOUpUWkRSQWVtQWEyQXJ6TUpldU90SGlQCkF4clpVZ2ZyRStsNm1meDVqZ3BQbHY3OS9QaWZpdHE4TjB4Y01zcDZlYWVkKzlaNkl2TWhzOFdZcHd4TWJNMFIKTmxTSVl1ZnM0bWkwMnVta0Z0bkNOY084c0JCNS80RURISkJSd29OWFNWN3JUTUJWQWVMWnltQUFyM3JUUHdJRApBUUFCQW9HREJuNW40aWJ3MGx3d0NJWENRai9Oc21ZaW9EZEhaTXkvdm1KZEx6djgvMWZJNlNIRXFUeEp0aVJzCkhobEJFRTBKd09pYzI1ZGNYVERFYkxheGdlV0d5dEticjhQaFd1VFlqeWtBMUVDUzAzbWQwZEVSK3ZKRXorRGgKUUlJeGJtZk5zSitqZ0hHMlRFaGlieTI2SzRPb29jMXFRZ0pBaFZ4dnJtbW5LaW90WXl4MUMrRUNRZy9uSnhvRgpFdUlpa0VZaGMwNFBmRjRHa2pkTGlXempYcDZPSzZQb0ExcVlYRE5lbUdkNWVpV21qekFISHdSdUpra2ZTMWQ3ClIydmkzdjZXVEVHbURzc1pEUUpDRGlUNGp0aDZFN3Q5QnpkRVlWYkYxbVo2UmpXczhBT0FuWjBIc0xHZEYrc1QKWk9PNGw0Y0t5dlBqOU03U09vSHBuVmRRZm85SVRRWkFjaGJ1Tm9iQ05uSjdBa0lIZkdZNXAxM0dPVUwwNEZZbwp6cjFhZlhsaXNob1V1Y3NXbEJJUzYrcDRRUFJWOGhlSHpmVWp1QTM3Szc3OEZPWE0wZ0JqUTlMUkJGQzRRd1BPCmUxN0hXQmtDUWdQL0JncTF0cWZrak1xQkh0eXhlMnU3d0VnZDJpSmxtdXpzOU1OREt6TWF3M3Y1cXFtRkNkT1YKWEk1SjhMTi9DTlhmV1dxb2FMRDZWekxrcjZEUUtnYmdDUUpDQkJLeElpME5XV05wSndiM0dEdlRSaFRVY2FtTwpSd2FkRStLdEl1U3UvWlZGZThEUDJleGcvWjVXVHZIem1OcFNCeGpaYzFpdHNjS0NxZVN5bGJIcFUrNFkKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K`,
	},
	{
		`{"bits": 128, "init": "7472784a3662796e71437577316a3432", "mode": 0, "pass": "7472784a3662796e71437577316a3432"}`,
		`LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRHUUFEQ0JqQUtCaEFEUjZZUWRyRzBLbFZ3L3BVM3VZR0Q4SXFFUApzQnFjZDhwZXgxZGZJdy9QeGg0ZjRVaVAyUWJnZkM4cktJV1NnRTNCRG1qcllzcUg4d2wzNUYvQ0dCb0JZQ3pvCjRCZGhGelVacEdKcGpXWk9rQXVoRC9zVDJ3bDlPUjhFcFRtV1hvVWFQcXFpK2s5U3poZ01ERkhNVFRkbGRlS0EKd3gvU1drM281S1IyR2kzaFZKNmJ2UUlEQVFBQgotLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0K`,
		`LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDYVFJQkFBS0JoQURSNllRZHJHMEtsVncvcFUzdVlHRDhJcUVQc0JxY2Q4cGV4MWRmSXcvUHhoNGY0VWlQCjJRYmdmQzhyS0lXU2dFM0JEbWpyWXNxSDh3bDM1Ri9DR0JvQllDem80QmRoRnpVWnBHSnBqV1pPa0F1aEQvc1QKMndsOU9SOEVwVG1XWG9VYVBxcWkrazlTemhnTURGSE1UVGRsZGVLQXd4L1NXazNvNUtSMkdpM2hWSjZidlFJRApBUUFCQW9HRFViMU01UUV2dE45VWZMUXlGSkVUTXh1SS9FTG5HZWJMdHZ5STJWTWQ1UnFRd0hsSmVEcGFveSs0CmJtWHBIWk00cytTWWxwQnhyVjdHWVJsYzhJZlNHSmIvbTlKWHNSMVVrU1RwWmc2VmVFeTFmZzE3UjUzTTM3VEkKTmNSQlh3a2IxM2xkd2FYYytEKytYMHl2OUpaMWlTS1hrbTNQUVc2MTZzY0pUclFuekdVeStBRUNRZzcyYlhLZQpodFBneXIxTnJmNndIRkJ6S0loVDgwR1lzVDkvUG0xZEVDNzVWTnNoQzRiMElDUDdBYThnM0E4WmQxK29MWDkvCnhXV051N1REN2pNUWp2cFIzUUpDRGdkME5wOEs4aXVZRGZlRTdUOXB6VjVZZ2h0TTJnM3NiWjZpd1BTcXJSMVUKZmR5OWhjZlhTOTdhcHlha2s2MHROY0ZCL1BDSkhnZG9uVTBVeldOWEVBTmhBa0lEQVRmZmdiaGZ5ay9NamxIMwp5SlFYRDlrKzcyVDFjbDE5Kytha2ZjRG5QZ2p0YklodEZJOXp5azkvUk9FTVl6Zld6T1krS1lHUnNGSFdybFlpCmlSdTlaejBDUWdQZ1lXZGFhUTdqcHQ5dEhxamoxZHR1ajJ4Y0dNOUQrNm1LcFJSR1J3Y1F6TEQrbHN2cG5YOFUKZER5dHU5b21oeENNZHl4cVZxa2FpUGkyUE9KSDZkMjk0UUpDQitxQzZPSVhrLzdoZkQzOVY1RTBWQ3oxQ2wzQwpjbEVYaG9vU0xIVHUrbXRlNVRLVTFOeU9IYWFId3pzbllSRnBTSit5WnFpL2YxbmgzdnFua0lGUHRKdlgKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K`,
	},
	{
		`{"bits": 128, "init": "44746c4359595a6e77464264504a5a46", "mode": 0, "pass": "59636d564a784a7747446131346b7261"}`,
		`LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRHUUFEQ0JqQUtCaEFDemltK3lKUmhlTmZZQ09CUUpTWldpaTVMMgpqbGFxMjRZT0IxUkN5Z29DUTR2aGprSFo0V1AwTEpDbVJHU3ZjZlNUMnhTL0Y0K2Q0QUVnbUZGRHpOdmxDM2I0CnVHU2dSdVF4ZElWK01JZThnbW9jWFZ4c0Y5L1FxbTZjSTFYNkZKNk5KNXNYU2dZTmN0WFFsQWFoVHBEeXNLVzYKVHgvdjRmMUR4Nm1uekdvM3lwQ1NLUUlEQVFBQgotLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0K`,
		`LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDYVFJQkFBS0JoQUN6aW0reUpSaGVOZllDT0JRSlNaV2lpNUwyamxhcTI0WU9CMVJDeWdvQ1E0dmhqa0haCjRXUDBMSkNtUkdTdmNmU1QyeFMvRjQrZDRBRWdtRkZEek52bEMzYjR1R1NnUnVReGRJVitNSWU4Z21vY1hWeHMKRjkvUXFtNmNJMVg2Rko2Tko1c1hTZ1lOY3RYUWxBYWhUcER5c0tXNlR4L3Y0ZjFEeDZtbnpHbzN5cENTS1FJRApBUUFCQW9HRFRsa1FDd1pqRHVHdlhDS0tvODducklvSjlPd0NhQWJxQmY4dXh3S1J3WkVtWHFTTW1mN2dkbkpvCklSWmhkYXBkMTVQWUJ0ZktSVk8yU2pvTjVHOW1XaHBON0Vjc3VrajNPSTZJY3o0TW9zdi9wTzlWWk55VjZrTWYKY1ZIbnBZYm1PZ0NDa3pRSER4dXBmWUJ4c25ITURETWJJMWQvN3BFN245UGtuTk9LbTh3eVBvMENRZzdWbWdTdAptUVNEZEI0NUg0YmM5QktpY0pUcGc1d25waGZqa09PbEtHMWF4WUFubGNVWTdid2x4S1pmTmlHeUVkcW96Tm5sClVWclRNemVTaStWSzhRMVFod0pDREJwZlR0UXZSU1hNdzA5SXpxcWNxendaR29GZTg3VkF6SVJXZHIycXBNQTIKQVhJSDBrQ2dmRzloNzFRc093ZTdwajlYMVM2UTNaU3o4MU5HVG85L1ppUFBBa0lPMHNNbENaTnVQeTA1Ump1Swp1Qi9zdndWZ3lEY0xRMU5sYTdETXlheXNHWmhoaHl6UjF5YzRhMFVtT3Q0TXJiUEpuQU9YZU43aXMwanFyelc3CjJqY2w1dUVDUWdQUUV4SmNXZi9vcHBjbzFRRDJVcURITUFsZmxEQW1lNkZ5VjJMVTRYdEJha0lPVUZSMk01aS8KNWhSbGFnRzJyL0R4cDVQck5ZdjRtckFmSGRrRjc5YVhsUUpDQlR0WXlyMk1LaFp3TUVWV1FOd2Z3ZmJya0U1LwpDU3lKOHNsa2E0eHRuLzdHdkhDZnYrWXNBQUhKekJ5ZVVDTzA2MVZreEk2VzI4N3pKZDFVUXZzMTRZa1EKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K`,
	},
	{
		`{"bits": 128, "init": "44746c4359595a6e77464264504a5a46", "mode": 0, "pass": "59636d564a784a7747446131346b7261"}`,
		`LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRHUUFEQ0JqQUtCaEFEV1RPb2JkNk9jUk5haENFVVAvMjkvTmtzMgpMM3BHV0VkUC9vVk0vVEJGWVV4TUtJRVp2M1VURFU3azJkOU1URW9ucStEeGtOZ1QwWlZrYjZQamR0TkczMXJOCnZ4NTF3NkNVTG1wTmpOWXZKaEp4dGxDZ0h3c2FPSW9KeHZRODZwQWFOT0hOYWJpSmR6bWt3MitQSU1yUFFRQUMKYVh1L0dwNlczaTZYbHhOVGFYUTFOUUlEQVFBQgotLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0K`,
		`LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDYVFJQkFBS0JoQURXVE9vYmQ2T2NSTmFoQ0VVUC8yOS9Oa3MyTDNwR1dFZFAvb1ZNL1RCRllVeE1LSUVaCnYzVVREVTdrMmQ5TVRFb25xK0R4a05nVDBaVmtiNlBqZHRORzMxck52eDUxdzZDVUxtcE5qTll2SmhKeHRsQ2cKSHdzYU9Jb0p4dlE4NnBBYU5PSE5hYmlKZHpta3cyK1BJTXJQUVFBQ2FYdS9HcDZXM2k2WGx4TlRhWFExTlFJRApBUUFCQW9HRExUVGllZExlSjd2NXp0U1F4UlFzY0JpQyt6WSt4QkloVVFXdkZ4T2VHRFN6UkttU3VsekNGTGZNCitjZmdMQmMzMlhDUHJrWFEzelZxSDFyUnBzMU5PbmtqWUdoTnpFd3dHNzZHV0l1VEdqRXlxVW1Cc2N4ZHdDOG4KR213TmVuQ3NSZitUOW9kWkVRcFYyVnZuVy8yV2JiUXR6TWtVWWpUT1pHUVYyYkxQcE9RQmRtMENRZzdKN040SgpKcEg3VnQyWFlBd3ZwdFJ3V2x1eURiY0hVN3VSMHZHK0NxVHh0WDZ4bUlGN2dGRzluOFBMR0l2L1BPMDZnbXFUCndERERDYk0yNHZXYkNEc3h5d0pDRG4yaUdtcDNQTWUzUEVwTG03RGVGd1NGeE5YUEhveUk3LzRXdG5rMG85WUwKR1pmdW9MbVRBZnNSZ3NWSzJBbHRLdVFSeUhjeU10aTZiSDV5ekxhTmxWVC9Ba0lKUFNDYS9ZQjVCbG1ZQ1c5WgpiWk45ZDhzYkticmpzdEllaGRVUWJMYmRvSnJQMFVjQzdSS1cvaTJHOWFRYUlaUUFaK0w5amR3dEdrcy9DSFQxCkZxc252ODBDUWduS3prTnBsTUFHK2dVTTg4RDNLVzJHaWRyMDNTejRyUVQ0d0dKNHo2Q3pZUGJmbThzUy9JdkgKSFJNd3ZaMzE2TWFtTG5vNFNqemdCa0tReElVZ0M5ZFJBd0pDQWFTL1FmR1ZpZ2tob05SSGRqVTFDZnBIaTEveQpKTmN4cExlV2pkWnZuZFJnSDdDNjhWMElhazB4aStxdTVpSTFxZGdOWWJPbWt5S013c1gyTzZDcFRrakIKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K`,
	},
	{
		`Hello World!`,
		`LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRHUUFEQ0JqQUtCaEFDNXBNY1N3TUFwdWd6Z0hteE0rTXZhbUpYZgp5WFZTTUdycjRFcGJiaWxDdVRka1Q0STltLzdZYVVxalVtaDZaMU44T2dQQ3crbXdmbEFiT2FHZjlRbjFPeSt4CmFScWJXTDIyWnlwc0dHT1pSbjUrcFNBdmE3ME82VkNTV29CZk9GRHNLdk02b012eUlaUE9yTGFNTThsUzhHd2IKcngzdjJPZlk1S3BPWm5IK0hROUIxd0lEQVFBQgotLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0K`,
		`LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDYVFJQkFBS0JoQUM1cE1jU3dNQXB1Z3pnSG14TStNdmFtSlhmeVhWU01HcnI0RXBiYmlsQ3VUZGtUNEk5Cm0vN1lhVXFqVW1oNloxTjhPZ1BDdyttd2ZsQWJPYUdmOVFuMU95K3hhUnFiV0wyMlp5cHNHR09aUm41K3BTQXYKYTcwTzZWQ1NXb0JmT0ZEc0t2TTZvTXZ5SVpQT3JMYU1NOGxTOEd3YnJ4M3YyT2ZZNUtwT1puSCtIUTlCMXdJRApBUUFCQW9HRGFNaGY4TzdJeUFTU2hlSEdJVUFBMkJadDZjMXRJZ0hnSjlrR1Awc1RrT3k0SGk5ZWhPWEsxMTIrCjJpYUdnQ2hZRC9NeThqamdhMVV3WTkySW81K01pbFZaZG8xSldPb0IwaE02Yk1UVFVLZ29tYnVsVkFsZ2tHOUkKQlprbUFYdWxjRFpFTFQybGE1WDVIYisyMmpqY0MvMTM3M3NZRGtBNm92aGZJaVRmck1UcDZla0NRZzRxNThveAo1cUtvbllENWpuQ253cWlvdmloWEtYWEc4QmZQdS9rWGU4MTFZTExsVmFqQkZGb0s2WmxoTkdBY0hWWDN6K0c5CmJRU25pMVpKMkZCT25WWUVFd0pDRFJwNEp1VFJIUkV6QXNILzNsbnVCQzA1aEVRWFFYMXFYUTE5K0VFeTVkeTAKY3Q3dWdlN2NQSnhwck1IT2VUcSt0bmFRNnZzMnZPOHVWakc0RUpTTmpadXRBa0lIRDFabUthdTJqck8rRzUzaApnWmU5R0NsNlRNVDZUZUpDMjEvZVp0ZG9zUDg0NXBOaS9xUTNvb3g1eERpblZCdENSYlV2MW9kRzlINjR4eCttCkZTYk9RRVVDUWd3NHZ3N1A1M2VzSGg4WllaVTczZlFKVnBkV2h6WnZTdkRsNzdQSTVEZGZwdk5wbVo2WmN0UVoKczdzTnZZNTNTNENXa0U2TDU1OUxtN1dMaERuNnhSanF0UUpDQWlWRnUvV1JOSm9GR2hXS1MyMldwbEpiSUY1ZgpJdkI5T25ST080SE5DNWxHbmdtOTczOXZzYjE1SUlsQStKUDZNZHNtTGN5UUZRelBWdHdRUDkrdHR6L0UKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K`,
	},
}

func TestRSA_EncryptAndDecrypt(t *testing.T) {
	for _, tt := range rsaTestSets {
		//		t.Log(tt)
		priKey, err := GetPriKey(tt.privKey)
		if err != nil {
			t.Fatal(err)
		}
		encoded, err := PriKeyByte(priKey, []byte(tt.src), true)
		if err != nil {
			t.Fatal(err)
		}
		pubKey, err := GetPubKey(tt.pubKey)
		if err != nil {
			t.Fatal(err)
		}

		decrypt, err := PubKeyByte(pubKey, encoded, false)
		if err != nil {
			t.Fatal(err)
		}

		if string(decrypt) != string(tt.src) {
			t.Fatal("Result not expected", decrypt, tt.src)
		}
	}
	priKey, err := GetPriKey("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDYWdJQkFBS0JoQURRaEpndDRXZHQ5M3psRiszcVFseEoxa1FNRFROSDc2S0ZoK0Z6M051aTVEKzVpQ3YrCnllVzJ1R01sSy9KQjQyOUdBZDQ3SDE2YmM4b1VDMFpvSDY3ZGFjNmxjUzZFWjJMa242Z09IUnp3dEFqS1p0S3UKVEYveldaNHk2LytWbnU4enhtdUcvV0hXeVFtYVk2TzMxeU83ekg0dUFzWTErYk1wcDFsZk1PSW8wdnlSM3dJRApBUUFCQW9HRUFKeEZnemQvWW1DTHhsSjdhSmJVUFE0cFFyNDFkbVZITnVvVU4rYjVjckhWbGR5YUxUNjZXU3BqCmJncUJzUUdvVGRDTnZkdFpXekh0eVZqVVNtUG11c3E5VjdkVzFnTzhDZTNUOTZuZjI5T0cvMU9GSmE2Qy9mK2kKMTBRYi9BMjEyTGsxTzYwclFxQm96aXJ0L0RIWDRWRGFiT0xMb1V6Mkx3dTZiS3dJYWJRQlk2c2hBa0lPeERmZQpoSmNoZkRzR3JHQzhxaEMxV1p3N1hoSGxackZrYUovem9aMjlCSUZ5SytQTkhhL1lOaDNoSHJ5WG03QmtWMTFZCitNRlRZWEU4NldlRG1TRmJlbTBDUWc0ZS9DZ1BrSGlRUHVoUjZndm5veFRzWVNId0FqU210cWlnZW9uSlZxbWgKbDgwS1FTeHJVTE1IbVlONEtacThpY2JBR3kzYk5xOTBtYzZlbE9lK01PUU4rd0pDQ01KSFNZeG9nUXBKa09uSwo3OTRJenlsNlRKUytGTTdYUm5Idy92ak1zZ1BzTEtid0Z3a1c5eThTaGloUFFiYXQ2TGNSdmVhLzlnK0V0ZGJVCitmQnBJdlA1QWtJS2Z3bWJsWVlqdDhTcTEwaUxOTkRKMnJLUWtXQnlWb0ZyY20zalFWOURrN1BNV3hUNnVZSXcKc1ROd3Y3N2RIOHVoaW1ZcGZjcDJQTXVmQTgxWFBNNEdsa1VDUWd0ZGxCalFIZGJTRmJ1NDdVLzRLd1ludVU2bApjbTlGOGxIUk9yNWlnZ0JyTGY4Lzl2ZlRRa3JNd2ROdmdEaHlmR1FLMnJpbW9tYzE4Zm9pcVpsNXorU29Cdz09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==")
	if err != nil {
		t.Fatal(err)
	}

	data := []byte("Here I am, where are you?")
	encoded, err := PriKeyByte(priKey, data, true)
	if err != nil {
		t.Fatal(err)
	}

	pubKey, err := GetPubKey("LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRHUUFEQ0JqQUtCaEFEUWhKZ3Q0V2R0OTN6bEYrM3FRbHhKMWtRTQpEVE5INzZLRmgrRnozTnVpNUQrNWlDdit5ZVcydUdNbEsvSkI0MjlHQWQ0N0gxNmJjOG9VQzBab0g2N2RhYzZsCmNTNkVaMkxrbjZnT0hSend0QWpLWnRLdVRGL3pXWjR5Ni8rVm51OHp4bXVHL1dIV3lRbWFZNk8zMXlPN3pINHUKQXNZMStiTXBwMWxmTU9JbzB2eVIzd0lEQVFBQgotLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0K")
	if err != nil {
		t.Fatal(err)
	}

	decrypt, err := PubKeyByte(pubKey, encoded, false)
	if err != nil {
		t.Fatal(err)
	}

	if string(decrypt) != string(data) {
		t.Fatal("Result not expected", decrypt, data)
	}
}

var UnpadTestSets = []struct {
	d        []byte
	expectL  []byte
	expectR  []byte
	expectLR []byte
}{
	{
		[]byte{0, 1, 222, 21, 1, 3, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0},
		[]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0},
		[]byte{0, 1, 222, 21, 1, 3, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
		[]byte{1, 2, 3, 4, 5, 6, 7, 8, 9},
	},
	{
		[]byte{0, 1, 2, 3, 4, 5, 0, 1, 0},
		[]byte{1, 0},
		[]byte{0, 1, 2, 3, 4, 5, 0, 1},
		[]byte{1},
	},
	{
		[]byte{0, 1, 2, 3, 4, 5, 0, 0, 0},
		[]byte{0, 0},
		[]byte{0, 1, 2, 3, 4, 5},
		nil,
	},
}

func TestUnPad(t *testing.T) {
	for _, tt := range UnpadTestSets {
		d1, err := LeftUnPad(tt.d)
		if err != nil {
			t.Fatal(err)
		}
		if bytes.Compare(d1, tt.expectL) != 0 {
			t.Fatal("d != expectL", d1, tt.expectL)
		}

		d2, err := RightUnPad(tt.d)
		if err != nil {
			t.Fatal(err)
		}
		if bytes.Compare(d2, tt.expectR) != 0 {
			t.Fatal("d2 != expectR", d2, tt.expectR)
		}

		d3, err := RightUnPad(d1)
		if err != nil {
			t.Fatal(err)
		}
		if bytes.Compare(d3, tt.expectLR) != 0 {
			t.Fatal("d3 != expectLR", d3, tt.expectLR)
		}
	}
}
